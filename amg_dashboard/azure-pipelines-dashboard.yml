# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: amg_dashboard_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
variables:
  - group: app-one
  - name: region
    value: 'us-east-2'
  - name: workspace
    value: 'g-295a2eacac'
  - name: profile
    value: 'PSProfile'

trigger:
  branches:
    include:
      - main
      - dev/add-dashboard
  paths:
    include:
      - /amg_dashboard/*

pool:
    vmImage: ubuntu-latest

stages:
  - stage: generate_api_key
    displayName: Generate API Key
    jobs:
    - job: 
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: PowerShell@2
        displayName: 'Check and install AWS.Tools modules'
        inputs:
          filePath: '$(build.sourcesdirectory)/amg_dashboard/InstallAWSTools.ps1'
      - task: PowerShell@2
        displayName: 'Set AWS Credentials'
        inputs:
          targetType: 'inline'
          script: 'Set-AWSCredential -AccessKey $(access_key) `
                    -SecretKey $(secret_key) `
                    -StoreAs $(profile)'
      # - task: PowerShell@2
      #   displayName: 'Check existing API Key'
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       Remove-MGRFWorkspaceApiKey -KeyName "automation" `
      #       -WorkspaceId $(workspace) `
      #       -ProfileName $(profile) `
      #       -Region $(region) -Force
      #   continueOnError: true
      # # - task: PowerShell@2
      # #   displayName: 'Create API key'
      # #   inputs:
      # #     targetType: 'inline'
      # #     script: |
      # #       New-MGRFWorkspaceApiKey -KeyName "automation" `
      # #       -KeyRole ADMIN `
      # #       -SecondsToLive 600 `
      # #       -WorkspaceId $(workspace) `
      # #       -Region $(region) `
      # #       -ProfileName $(profile)
      - task: PowerShell@2
        displayName: 'Create API key'
        inputs:
          targetType: 'inline'
          script: |
              $apikey= (New-MGRFWorkspaceApiKey -KeyName "automation" `
              -KeyRole ADMIN `
              -SecondsToLive 600 `
              -WorkspaceId $(workspace) `
              -Region $(region) `
              -ProfileName $(profile)) | Out-String
              Write-Host "##vso[task.setvariable variable=api_key]$apikey"
      - task: PowerShell@2
        displayName: 'Read variable'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "$(api_key)"
      #   condition: always()

  # - stage: grafana_dashboard_deploy
  #   displayName: Deploy Amazon Managed Grafana dashboard
  #   jobs:
  #   - job: initialize
  #     displayName: Initialize Terraform
  #     pool:
  #       vmImage: ubuntu-latest
  #     steps:
  #     - task: PowerShell@2
  #       inputs:
  #         targetType: 'inline'
  #         script: 'terraform init -backend-config="bucket=kunduso-terraform-remote-bucket" -backend-config="key=tf/managed-grafana/terraform.tfstate" -backend-config="region=$(region)" -backend-config="access_key=$(access_key)" -backend-config="secret_key=$(secret_key)" -no-color'
  #         workingDirectory: '$(build.sourcesdirectory)/amg_dashboard'
  #       displayName: Terraform init
  #     - task: Bash@3
  #       inputs:
  #         targetType: 'inline'
  #         script: 'pip install checkov'
  #       displayName: Install checkov
  #     - task: Bash@3
  #       inputs:
  #         targetType: 'inline'
  #         workingDirectory: $(System.DefaultWorkingDirectory)/amg_workspace
  #         script: 'checkov -d . -o junitxml > scan-result.xml'
  #       displayName: Checkov source code scan
  #       continueOnError: true
  #     - task: PublishTestResults@2
  #       inputs:
  #         testResultsFormat: 'JUnit'
  #         searchFolder: '$(System.DefaultWorkingDirectory)/amg_workspace'
  #         testResultsFiles: '**/*scan-result.xml'
  #         mergeTestResults: false
  #         testRunTitle: Terraform source code scan
  #         failTaskOnFailedTests: false
  #         publishRunAttachments: true
  #       displayName: Publish Test Result
  #     - task: PowerShell@2
  #       inputs:  
  #         targetType: 'inline'
  #         script: 'terraform plan -var access_key=$(access_key) -var secret_key=$(secret_key) -no-color'
  #         workingDirectory: '$(build.sourcesdirectory)/amg_workspace'
  #       displayName: "Terraform plan"
  #   - job: approve
  #     dependsOn: initialize
  #     condition: and (succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranchName'], 'main'))
  #     pool: server
  #     displayName: Wait for approval
  #     steps:
  #     - task: ManualValidation@0
  #       timeoutInMinutes: 15 # task times out in 15 mins
  #       inputs:
  #         notifyUsers: skundu.dev@gmail.com
  #         instructions: 'Please validate the build configuration and resume'
  #         onTimeout: 'reject'
  #   - job: apply
  #     dependsOn: approve
  #     pool:
  #       vmImage: ubuntu-latest
  #     displayName: Terraform apply
  #     steps:
  #     - task: PowerShell@2
  #       inputs:
  #         targetType: 'inline'
  #         script: 'terraform init -backend-config="bucket=kunduso-terraform-remote-bucket" -backend-config="key=tf/managed-grafana/terraform.tfstate" -backend-config="region=$(region)" -backend-config="access_key=$(access_key)" -backend-config="secret_key=$(secret_key)" -no-color'
  #         workingDirectory: '$(build.sourcesdirectory)/amg_workspace'
  #       displayName: Terraform init
  #     - task: PowerShell@2
  #       inputs:  
  #         targetType: 'inline'
  #         script: 'terraform apply -var region=$(region) -var access_key=$(access_key) -var secret_key=$(secret_key) --auto-approve -no-color'
  #         workingDirectory: '$(build.sourcesdirectory)/amg_workspace'
  #       displayName: "Terraform apply"
      - task: PowerShell@2
        displayName: 'Delete API Key'
        inputs:
          targetType: 'inline'
          script: |
            Remove-MGRFWorkspaceApiKey -KeyName "automation" `
            -WorkspaceId $(workspace) `
            -ProfileName $(profile) `
            -Region $(region) -Force
        condition: always()
        continueOnError: true
      - task: PowerShell@2
        displayName: 'Remove AWS Credentials'
        inputs:
          targetType: 'inline'
          script: 'Remove-AWSCredentialProfile -ProfileName $(profile) -Force'
        condition: always()