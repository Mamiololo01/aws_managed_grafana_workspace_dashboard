# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
variables:
  - group: app-one
  - name: region
    value: 'us-east-2'

trigger:
  - add-scaffolding
  
pool:
    vmImage: ubuntu-latest

stages:
  # - stage: grafana_dashboard_deploy
  #   displayName: Deploy Amazon Managed Grafana workspace
  #   jobs:
  #   - job: init
  #     displayName: Terraform validate
  #     pool:
  #       vmImage: ubuntu-latest
  #     steps:
  #     # - task: PowerShell@2
  #     #   inputs:
  #     #     targetType: 'inline'
  #     #     script: 'terraform init -backend-config="bucket=terraform-remote-bucket-skundu" -backend-config="key=tf/terraform-workspace-poc/terraform.tfstate" -backend-config="region=$(region)" -backend-config="access_key=$(access_key)" -backend-config="secret_key=$(secret_key)" -no-color'
  #     #     workingDirectory: '$(build.sourcesdirectory)'
  #     #   displayName: Terraform init
  #     - task: Bash@3
  #       inputs:
  #         targetType: 'inline'
  #         script: 'pip install checkov'
  #       displayName: Install checkov
  #     # - task: Bash@3
  #     #   inputs:
  #     #     targetType: 'inline'
  #     #     workingDirectory: $(System.DefaultWorkingDirectory)
  #     #     script: 'checkov -d . -o junitxml > scan-result.xml'
  #     #   displayName: Checkov source code scan
  #     #   continueOnError: true
  #     # - task: PublishTestResults@2
  #     #   inputs:
  #     #     testResultsFormat: 'JUnit'
  #     #     searchFolder: '$(System.DefaultWorkingDirectory)'
  #     #     testResultsFiles: '**/*scan-result.xml'
  #     #     mergeTestResults: false
  #     #     testRunTitle: Terraform source code scan
  #     #     failTaskOnFailedTests: false
  #     #     publishRunAttachments: true
  #     #   displayName: Publish Test Result
  - stage: generate_api_key
    displayName: Generate API Key
    jobs:
    - job: 
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: PowerShell@2
        displayName: 'Check and install AWS.Tools.Installer and AWS.Tools.Common modules'
        inputs:
          filePath: 'InstallAWSTools.ps1'
      - task: PowerShell@2
        displayName: 'Check commandline options for new key'
        inputs:
          targetType: 'inline'
          script: |
            New-MGRFWorkspaceApiKey
      - task: PowerShell@2
        displayName: 'Check commandline options for existing key'
        inputs:
          targetType: 'inline'
          script: |
            Remove-MGRFWorkspaceApiKey


            