# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
variables:
  - group: app-one
  - name: region
    value: 'us-east-2'
  - name: profile
    value: 'GrafanaWorkspaceProfile'
trigger:
  - add-scaffolding
  - main

pool:
    vmImage: ubuntu-latest

stages:
  - stage: grafana_dashboard_deploy
    displayName: Deploy Amazon Managed Grafana workspace
    jobs:
    # - job: initialize
    #   displayName: Initialize Terraform
    #   pool:
    #     vmImage: ubuntu-latest
    #   steps:
    #   - task: PowerShell@2
    #     inputs:
    #       targetType: 'inline'
    #       script: 'terraform init -backend-config="bucket=kunduso-terraform-remote-bucket" -backend-config="key=tf/managed-grafana/terraform.tfstate" -backend-config="region=$(region)" -backend-config="access_key=$(access_key)" -backend-config="secret_key=$(secret_key)" -no-color'
    #       workingDirectory: '$(build.sourcesdirectory)/amg_workspace'
    #     displayName: Terraform init
    #   - task: Bash@3
    #     inputs:
    #       targetType: 'inline'
    #       script: 'pip install checkov'
    #     displayName: Install checkov
    #   - task: Bash@3
    #     inputs:
    #       targetType: 'inline'
    #       workingDirectory: $(System.DefaultWorkingDirectory)/amg_workspace
    #       script: 'checkov -d . -o junitxml > scan-result.xml'
    #     displayName: Checkov source code scan
    #     continueOnError: true
    #   - task: PublishTestResults@2
    #     inputs:
    #       testResultsFormat: 'JUnit'
    #       searchFolder: '$(System.DefaultWorkingDirectory)/amg_workspace'
    #       testResultsFiles: '**/*scan-result.xml'
    #       mergeTestResults: false
    #       testRunTitle: Terraform source code scan
    #       failTaskOnFailedTests: false
    #       publishRunAttachments: true
    #     displayName: Publish Test Result
    #   - task: PowerShell@2
    #     inputs:  
    #       targetType: 'inline'
    #       script: 'terraform plan -var access_key=$(access_key) -var secret_key=$(secret_key) -no-color'
    #       workingDirectory: '$(build.sourcesdirectory)/amg_workspace'
    #     displayName: "Terraform plan"
    # - job: approve
    #   dependsOn: initialize
    #   # condition: and (succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranchName'], 'main'))
    #   pool: server
    #   displayName: Wait for approval
    #   steps:
    #   - task: ManualValidation@0
    #     timeoutInMinutes: 15 # task times out in 15 mins
    #     inputs:
    #       notifyUsers: skundu.dev@gmail.com
    #       instructions: 'Please validate the build configuration and resume'
    #       onTimeout: 'reject'
    - job: apply
      # dependsOn: approve
      pool:
        vmImage: ubuntu-latest
      displayName: Terraform apply
      steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: 'terraform init -backend-config="bucket=kunduso-terraform-remote-bucket" -backend-config="key=tf/managed-grafana/terraform.tfstate" -backend-config="region=$(region)" -backend-config="access_key=$(access_key)" -backend-config="secret_key=$(secret_key)" -no-color'
          workingDirectory: '$(build.sourcesdirectory)/amg_workspace'
        displayName: Terraform init
      - task: PowerShell@2
        inputs:  
          targetType: 'inline'
          script: 'terraform apply -var region=$(region) -var access_key=$(access_key) -var secret_key=$(secret_key) --auto-approve -no-color'
          workingDirectory: '$(build.sourcesdirectory)/amg_workspace'
        displayName: "Terraform apply"
      # - task: PowerShell@2
      #   inputs:  
      #     targetType: 'inline'
      #     script: 'terraform output aws_grafana_workspace_value'
      #     workingDirectory: '$(build.sourcesdirectory)/amg_workspace'
      #   displayName: "Terraform output"
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $GrafanaWorkspaceID = (terraform output aws_grafana_workspace_value) | Out-String
            # Write-Host "Value of workspace:  $GrafanaWorkspaceID"
            Write-Host "##vso[task.setvariable variable=WorkspaceID;isOutput=true]$GrafanaWorkspaceID"
          workingDirectory: '$(build.sourcesdirectory)/amg_workspace'
        name: passOutput
  - stage: generate_api_key
    displayName: Generate API Key
    jobs:
    - job: 
      pool:
        vmImage: ubuntu-latest
      variables:
        GrafanaWorkspaceID: $[ stageDependencies.grafana_dashboard_deploy.apply.outputs['passOutput.WorkspaceID']]
        KeyName: app-one
      steps:
        - task: PowerShell@2
          name: readVariable
          inputs:
            targetType: 'inline'
            script: |
              Write-Host "Value of workspace: $(GrafanaWorkspaceID)"

        - task: PowerShell@2
          displayName: 'Check and install AWS.Tools.Installer and AWS.Tools.Common modules'
          inputs:
            filePath: 'InstallAWSTools.ps1'
        - task: PowerShell@2
          displayName: 'Set AWS Credentail'
          inputs:
            targetType: 'inline'
            script: 'Set-AWSCredential -AccessKey $(access_key) `
                      -SecretKey $(secret_key) `
                      -StoreAs $(profile)'
        - task: PowerShell@2
          displayName: 'Check commandline options for new key'
          inputs:
            targetType: 'inline'
            script: |
              New-MGRFWorkspaceApiKey -KeyName $(KeyName) -WorkspaceId $(GrafanaWorkspaceID) -KeyRole ADMIN -SecondsToLive 60 -ProfileName $(profile) -Region $(region)
          continueOnError: true
        - task: PowerShell@2
          displayName: 'Check commandline options for existing key'
          inputs:
            targetType: 'inline'
            script: |
              Remove-MGRFWorkspaceApiKey -KeyName $(KeyName) -WorkspaceId $(GrafanaWorkspaceID) -ProfileName $(profile) -Region $(region)
        - task: PowerShell@2
          displayName: 'Remove AWS Credentail'
          inputs:
            targetType: 'inline'
            script: 'Remove-AWSCredentialProfile -ProfileName $(profile) -Force'
          condition: always()